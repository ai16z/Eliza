#!/usr/bin/env bash

TARGET_ENV="$1"
overall_exit_code=0  # Initialize overall success indicator

# Check if the environment name is provided and valid
if [ -z "$TARGET_ENV" ]; then
    echo "Please provide an environment name (dev, cicd, staging, prod)"
    exit 1
fi

if [ "$TARGET_ENV" != "dev" ] && [ "$TARGET_ENV" != "cicd" ] && [ "$TARGET_ENV" != "staging" ] && [ "$TARGET_ENV" != "prod" ]; then
    echo "Please provide a valid environment name (dev, cicd, staging, prod)"
    exit 1
fi

if [ "$TARGET_ENV" == "dev" ] || [ "$TARGET_ENV" = "cicd" ]; then
    output_env_file=".env.local"
else
    output_env_file=".env.$TARGET_ENV" #Not really used... can be used to check values.
fi

# Check if op is installed
if ! command -v op &> /dev/null; then
    echo "op could not be found - please install 1password cli"
    exit 1
fi

env_template=".env.template"
env_example=".env.example"

if [ -f "$env_template" ]; then  # Check if .env.template exists
    echo "Generating .env file for $TARGET_ENV"

    # Count total number of variables to process
    total_vars=$(grep -c "^[^#]*=.*op://" "$env_template")
    current_var=0
    op_success=0
    default_used=0

    # Create a temporary file to store the processed output
    temp_file=$(mktemp)

    # Process each line in the template
    while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ $line =~ ^[^#]*=.*op:// ]]; then
            ((current_var++))
            # Extract the key and the op reference
            key=$(echo "$line" | cut -d'=' -f1)
            op_ref=$(echo "$line" | cut -d'=' -f2-)

            # Try to get value from 1Password
            value=$(TARGET_ENV="$TARGET_ENV" op inject <<<"$op_ref" 2>/dev/null)

            if [ $? -ne 0 ]; then
                # Try to get default value from .env.example
                if [ -f "$env_example" ]; then
                    default_value=$(grep "^$key=" "$env_example" | cut -d'=' -f2-)
                    if [ ! -z "$default_value" ]; then
                        ((default_used++))
                        echo "$key=$default_value" >> "$temp_file"
                    else
                        echo "$key=" >> "$temp_file"
                    fi
                else
                    echo "$key=" >> "$temp_file"
                fi
            else
                ((op_success++))
                echo "$key=$value" >> "$temp_file"
            fi

            # Calculate and show progress
            progress=$((current_var * 100 / total_vars))
            printf "\rProgress: %d%% (%d/%d vars processed)" $progress $current_var $total_vars
        else
            echo "$line" >> "$temp_file"
        fi
    done < "$env_template"

    # Print final statistics
    echo -e "\nComplete! Successfully retrieved $op_success values from 1Password, used $default_used default values."

    # Move the temporary file to the final location
    mv "$temp_file" "$output_env_file"

    # Check if any errors occurred during processing
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to process environment variables for $TARGET_ENV"
        overall_exit_code=1
    fi
else
    echo "No .env.template found..."
fi

# Check if in "dev" and if so, remove KAFKA_B64* env vars from .env.local
# They are placeholders in 1pass for "dev" vault... but we don't want them in .env.local
if [ "$TARGET_ENV" == "dev" ] || [ "$TARGET_ENV" == "cicd" ]; then
    echo "Removing KAFKA_B64* env vars from .env.local"
    sed -i '' '/^KAFKA_B64/d' .env.local
fi

if [ "$TARGET_ENV" == "dev" ]; then
    echo "TARGET_ENV = dev... using local values..."

    # generate a self-signed cert if one doesn't already exist, but don't do it in CI:
    if [ -z "$CI" ]; then
        CERT_DIR="$HOME/.config/royal"
        if ! [ -f "$CERT_DIR/dev.royal.market.crt" ]; then
            echo "Self-signed dev.royal.market cert does not exist, generating one..."
            mkdir -p "$CERT_DIR"
            openssl req -x509 -out "$CERT_DIR/dev.royal.market.crt" -keyout "$CERT_DIR/dev.royal.market.key" -days 365 \
                -newkey rsa:2048 -nodes -sha256 \
                -subj '/CN=dev.royal.market' -extensions EXT -config <( \
                printf "[dn]\nCN=dev.royal.market\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:dev.royal.market\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")

            echo "Adding dev.royal.market self-signed cert add to keychain..."
            sudo security add-trusted-cert \
                -d \
                -r trustRoot \
                -k "/Library/Keychains/System.keychain" \
                "$CERT_DIR/dev.royal.market.crt"
        fi
    fi
fi

if [ $overall_exit_code -ne 0 ]; then
    echo "One or more files failed to process correctly."
fi
exit $overall_exit_code
